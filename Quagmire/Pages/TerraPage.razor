@page "/terra"

@using Terra
@using Codex
@inject Namer namer
@inject IPopulationReporter populationReporter
@inject IWorldAlterer worldAlterer
@inject IWorldReporter worldReporter
@inject IPartitionAlterer partitionAlterer

<pre>@WorldReport</pre>

<button class="btn btn-primary" @onclick="Report">Report</button>

@code {
    public string WorldReport { get; set; }

    private Random random = new Random();

    private World CreateWorld()
    {
        var population = random.Next(1, 10_000) * 1_000_000m;

        var world = new World() { Name = this.namer.GetName(), Continents = CreatePartitions(), Population = population };

        return world;
    }

    private List<Partition> CreatePartitions()
    {
        var split = random.NextDouble();

        var partitions = new List<Partition>()
        {
            new Partition() { Name = this.namer.GetName(), Share = (decimal) split },
            new Partition() { Name = this.namer.GetName(), Share = (decimal) (1.0 - split) },
        };

        for (int i = 0; i < partitions.Count; i++)
        {
            var partition = new Partition(partitions[i]);

            if (partition.Share > .6m)
            {
                partition.Partitions = CreatePartitions();
            }

            partitions[i] = partition;
        }

        return partitions;
    }

    private Task Report()
    {
        var seed = 10;

        //var world = Terra.Agolora.AgoloraWorld.Agolora;
        var world = CreateWorld();

        world.Continents = partitionAlterer.Randomize(world.Continents, 0, 30, 10, seed);

        worldAlterer.Alter(world);

        var report = populationReporter.Report(world.Population, Terra.Agolora.Challenges.AgoloraChallenges);

        var worldReport = worldReporter.Report(world);

        WorldReport = report + Environment.NewLine + worldReport;

        return Task.CompletedTask;
    }
}

@page "/terra"

@using Terra
@using Codex
@using Codex.NameModification
@using Codex.Names
@using Codex.WordRetrieval 
@inject Namer namer
@inject IPopulationReporter populationReporter
@inject IWorldAlterer worldAlterer
@inject IWorldReporter worldReporter
@inject IPartitionAlterer partitionAlterer
@inject ModificationGenerator modificationGenerator
@inject IWordRetriever wordRetriever

<pre>@WorldReport</pre>

@*<button class="btn btn-primary" @onclick="Report">Generate</button>
<button class="btn btn-primary" @onclick="ReportAgolora">Agolora</button>
*@
@code {
    public string WorldReport { get; set; } = String.Empty;

    private SeededMarkovNamer markovNamer = new SeededMarkovNamer() { Order = 2 };
    private Random random = new Random();
    private List<INameModifier> modifiers = new();
    private List<String> words = new();

    private String GetName()
    {
        var startingName = new DualNounName() { FirstNoun = words.Pick(), SecondNoun = words.Pick() };
        Name name = startingName;

        foreach (var modifier in modifiers)
        {
            name = modifier.Modify(name);
        }

        return name.GetName();
    }

    private async Task<World> CreateWorld(decimal? worldPopulation = null)
    {
        modifiers = (await this.modificationGenerator.GetNameModifiers()).ToList();

        words = (await wordRetriever.GetWords("Words")).ToList();

        worldPopulation ??= random.Next(1, 10_000) * 100_000m;

        var world = new World() { Name = GetName(), Continents = await CreatePartitions(worldPopulation.Value), Population = worldPopulation.Value };

        return world;
    }

    private async Task<List<Partition>> CreatePartitions(decimal population)
    {
        var partitionCount = random.Next(1, 10);

        var partitions = new List<Partition>();

        for (int i = 0; i < partitionCount; i++)
        {
            partitions.Add(new Partition() { Name = GetName(), Share = 1.0m / partitionCount });
        }

        for (int i = 0; i < partitions.Count; i++)
        {
            var partition = new Partition(partitions[i]);

            var partitionPopulation = (partition.Share * population);

            if (partitionPopulation > 5_000_000)
            {
                partition.Partitions = await CreatePartitions(partitionPopulation);
            }

            partitions[i] = partition;
        }

        return partitions;
    }

    private async Task Report()
    {
        var world = await CreateWorld();

        world.Continents = partitionAlterer.Randomize(world.Continents, 0, 30, 10);

        var report = populationReporter.Report(world.Population, Terra.Agolora.Challenges.AgoloraChallenges);

        var worldReport = worldReporter.Report(world, ReportVerbosity.Limited);

        WorldReport = report + Environment.NewLine + worldReport;
    }

    private Task ReportAgolora()
    {
        var seed = 10;

        var world = Terra.Agolora.AgoloraWorld.Agolora;

        world.Continents = partitionAlterer.Randomize(world.Continents, 0, 30, 10, seed);

        worldAlterer.Alter(world);

        var report = populationReporter.Report(world.Population, Terra.Agolora.Challenges.AgoloraChallenges);

        var worldReport = worldReporter.Report(world, ReportVerbosity.Full);

        WorldReport = report + Environment.NewLine + worldReport;

        return Task.CompletedTask;
    }
}